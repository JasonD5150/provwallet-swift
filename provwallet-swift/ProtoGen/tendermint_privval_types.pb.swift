// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tendermint/privval/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Tendermint_Privval_Errors: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknown // = 0
  case unexpectedResponse // = 1
  case noConnection // = 2
  case connectionTimeout // = 3
  case readTimeout // = 4
  case writeTimeout // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .unexpectedResponse
    case 2: self = .noConnection
    case 3: self = .connectionTimeout
    case 4: self = .readTimeout
    case 5: self = .writeTimeout
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .unexpectedResponse: return 1
    case .noConnection: return 2
    case .connectionTimeout: return 3
    case .readTimeout: return 4
    case .writeTimeout: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tendermint_Privval_Errors: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Tendermint_Privval_Errors] = [
    .unknown,
    .unexpectedResponse,
    .noConnection,
    .connectionTimeout,
    .readTimeout,
    .writeTimeout,
  ]
}

#endif  // swift(>=4.2)

public struct Tendermint_Privval_RemoteSignerError {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var description_p: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// PubKeyRequest requests the consensus public key from the remote signer.
public struct Tendermint_Privval_PubKeyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var chainID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// PubKeyResponse is a response message containing the public key.
public struct Tendermint_Privval_PubKeyResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var pubKey: Tendermint_Crypto_PublicKey {
    get {return _pubKey ?? Tendermint_Crypto_PublicKey()}
    set {_pubKey = newValue}
  }
  /// Returns true if `pubKey` has been explicitly set.
  public var hasPubKey: Bool {return self._pubKey != nil}
  /// Clears the value of `pubKey`. Subsequent reads from it will return its default value.
  public mutating func clearPubKey() {self._pubKey = nil}

  public var error: Tendermint_Privval_RemoteSignerError {
    get {return _error ?? Tendermint_Privval_RemoteSignerError()}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {self._error = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _pubKey: Tendermint_Crypto_PublicKey? = nil
  fileprivate var _error: Tendermint_Privval_RemoteSignerError? = nil
}

/// SignVoteRequest is a request to sign a vote
public struct Tendermint_Privval_SignVoteRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vote: Tendermint_Types_Vote {
    get {return _vote ?? Tendermint_Types_Vote()}
    set {_vote = newValue}
  }
  /// Returns true if `vote` has been explicitly set.
  public var hasVote: Bool {return self._vote != nil}
  /// Clears the value of `vote`. Subsequent reads from it will return its default value.
  public mutating func clearVote() {self._vote = nil}

  public var chainID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _vote: Tendermint_Types_Vote? = nil
}

/// SignedVoteResponse is a response containing a signed vote or an error
public struct Tendermint_Privval_SignedVoteResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vote: Tendermint_Types_Vote {
    get {return _vote ?? Tendermint_Types_Vote()}
    set {_vote = newValue}
  }
  /// Returns true if `vote` has been explicitly set.
  public var hasVote: Bool {return self._vote != nil}
  /// Clears the value of `vote`. Subsequent reads from it will return its default value.
  public mutating func clearVote() {self._vote = nil}

  public var error: Tendermint_Privval_RemoteSignerError {
    get {return _error ?? Tendermint_Privval_RemoteSignerError()}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {self._error = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _vote: Tendermint_Types_Vote? = nil
  fileprivate var _error: Tendermint_Privval_RemoteSignerError? = nil
}

/// SignProposalRequest is a request to sign a proposal
public struct Tendermint_Privval_SignProposalRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var proposal: Tendermint_Types_Proposal {
    get {return _proposal ?? Tendermint_Types_Proposal()}
    set {_proposal = newValue}
  }
  /// Returns true if `proposal` has been explicitly set.
  public var hasProposal: Bool {return self._proposal != nil}
  /// Clears the value of `proposal`. Subsequent reads from it will return its default value.
  public mutating func clearProposal() {self._proposal = nil}

  public var chainID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _proposal: Tendermint_Types_Proposal? = nil
}

/// SignedProposalResponse is response containing a signed proposal or an error
public struct Tendermint_Privval_SignedProposalResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var proposal: Tendermint_Types_Proposal {
    get {return _proposal ?? Tendermint_Types_Proposal()}
    set {_proposal = newValue}
  }
  /// Returns true if `proposal` has been explicitly set.
  public var hasProposal: Bool {return self._proposal != nil}
  /// Clears the value of `proposal`. Subsequent reads from it will return its default value.
  public mutating func clearProposal() {self._proposal = nil}

  public var error: Tendermint_Privval_RemoteSignerError {
    get {return _error ?? Tendermint_Privval_RemoteSignerError()}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {self._error = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _proposal: Tendermint_Types_Proposal? = nil
  fileprivate var _error: Tendermint_Privval_RemoteSignerError? = nil
}

/// PingRequest is a request to confirm that the connection is alive.
public struct Tendermint_Privval_PingRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// PingResponse is a response to confirm that the connection is alive.
public struct Tendermint_Privval_PingResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Tendermint_Privval_Message {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sum: Tendermint_Privval_Message.OneOf_Sum? = nil

  public var pubKeyRequest: Tendermint_Privval_PubKeyRequest {
    get {
      if case .pubKeyRequest(let v)? = sum {return v}
      return Tendermint_Privval_PubKeyRequest()
    }
    set {sum = .pubKeyRequest(newValue)}
  }

  public var pubKeyResponse: Tendermint_Privval_PubKeyResponse {
    get {
      if case .pubKeyResponse(let v)? = sum {return v}
      return Tendermint_Privval_PubKeyResponse()
    }
    set {sum = .pubKeyResponse(newValue)}
  }

  public var signVoteRequest: Tendermint_Privval_SignVoteRequest {
    get {
      if case .signVoteRequest(let v)? = sum {return v}
      return Tendermint_Privval_SignVoteRequest()
    }
    set {sum = .signVoteRequest(newValue)}
  }

  public var signedVoteResponse: Tendermint_Privval_SignedVoteResponse {
    get {
      if case .signedVoteResponse(let v)? = sum {return v}
      return Tendermint_Privval_SignedVoteResponse()
    }
    set {sum = .signedVoteResponse(newValue)}
  }

  public var signProposalRequest: Tendermint_Privval_SignProposalRequest {
    get {
      if case .signProposalRequest(let v)? = sum {return v}
      return Tendermint_Privval_SignProposalRequest()
    }
    set {sum = .signProposalRequest(newValue)}
  }

  public var signedProposalResponse: Tendermint_Privval_SignedProposalResponse {
    get {
      if case .signedProposalResponse(let v)? = sum {return v}
      return Tendermint_Privval_SignedProposalResponse()
    }
    set {sum = .signedProposalResponse(newValue)}
  }

  public var pingRequest: Tendermint_Privval_PingRequest {
    get {
      if case .pingRequest(let v)? = sum {return v}
      return Tendermint_Privval_PingRequest()
    }
    set {sum = .pingRequest(newValue)}
  }

  public var pingResponse: Tendermint_Privval_PingResponse {
    get {
      if case .pingResponse(let v)? = sum {return v}
      return Tendermint_Privval_PingResponse()
    }
    set {sum = .pingResponse(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Sum: Equatable {
    case pubKeyRequest(Tendermint_Privval_PubKeyRequest)
    case pubKeyResponse(Tendermint_Privval_PubKeyResponse)
    case signVoteRequest(Tendermint_Privval_SignVoteRequest)
    case signedVoteResponse(Tendermint_Privval_SignedVoteResponse)
    case signProposalRequest(Tendermint_Privval_SignProposalRequest)
    case signedProposalResponse(Tendermint_Privval_SignedProposalResponse)
    case pingRequest(Tendermint_Privval_PingRequest)
    case pingResponse(Tendermint_Privval_PingResponse)

  #if !swift(>=4.1)
    public static func ==(lhs: Tendermint_Privval_Message.OneOf_Sum, rhs: Tendermint_Privval_Message.OneOf_Sum) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.pubKeyRequest, .pubKeyRequest): return {
        guard case .pubKeyRequest(let l) = lhs, case .pubKeyRequest(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pubKeyResponse, .pubKeyResponse): return {
        guard case .pubKeyResponse(let l) = lhs, case .pubKeyResponse(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.signVoteRequest, .signVoteRequest): return {
        guard case .signVoteRequest(let l) = lhs, case .signVoteRequest(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.signedVoteResponse, .signedVoteResponse): return {
        guard case .signedVoteResponse(let l) = lhs, case .signedVoteResponse(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.signProposalRequest, .signProposalRequest): return {
        guard case .signProposalRequest(let l) = lhs, case .signProposalRequest(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.signedProposalResponse, .signedProposalResponse): return {
        guard case .signedProposalResponse(let l) = lhs, case .signedProposalResponse(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pingRequest, .pingRequest): return {
        guard case .pingRequest(let l) = lhs, case .pingRequest(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pingResponse, .pingResponse): return {
        guard case .pingResponse(let l) = lhs, case .pingResponse(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tendermint.privval"

extension Tendermint_Privval_Errors: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ERRORS_UNKNOWN"),
    1: .same(proto: "ERRORS_UNEXPECTED_RESPONSE"),
    2: .same(proto: "ERRORS_NO_CONNECTION"),
    3: .same(proto: "ERRORS_CONNECTION_TIMEOUT"),
    4: .same(proto: "ERRORS_READ_TIMEOUT"),
    5: .same(proto: "ERRORS_WRITE_TIMEOUT"),
  ]
}

extension Tendermint_Privval_RemoteSignerError: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RemoteSignerError"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tendermint_Privval_RemoteSignerError, rhs: Tendermint_Privval_RemoteSignerError) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Privval_PubKeyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PubKeyRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tendermint_Privval_PubKeyRequest, rhs: Tendermint_Privval_PubKeyRequest) -> Bool {
    if lhs.chainID != rhs.chainID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Privval_PubKeyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PubKeyResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pub_key"),
    2: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._pubKey) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._pubKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tendermint_Privval_PubKeyResponse, rhs: Tendermint_Privval_PubKeyResponse) -> Bool {
    if lhs._pubKey != rhs._pubKey {return false}
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Privval_SignVoteRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SignVoteRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vote"),
    2: .standard(proto: "chain_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._vote) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._vote {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tendermint_Privval_SignVoteRequest, rhs: Tendermint_Privval_SignVoteRequest) -> Bool {
    if lhs._vote != rhs._vote {return false}
    if lhs.chainID != rhs.chainID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Privval_SignedVoteResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SignedVoteResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vote"),
    2: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._vote) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._vote {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tendermint_Privval_SignedVoteResponse, rhs: Tendermint_Privval_SignedVoteResponse) -> Bool {
    if lhs._vote != rhs._vote {return false}
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Privval_SignProposalRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SignProposalRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "proposal"),
    2: .standard(proto: "chain_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._proposal) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._proposal {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tendermint_Privval_SignProposalRequest, rhs: Tendermint_Privval_SignProposalRequest) -> Bool {
    if lhs._proposal != rhs._proposal {return false}
    if lhs.chainID != rhs.chainID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Privval_SignedProposalResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SignedProposalResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "proposal"),
    2: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._proposal) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._proposal {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tendermint_Privval_SignedProposalResponse, rhs: Tendermint_Privval_SignedProposalResponse) -> Bool {
    if lhs._proposal != rhs._proposal {return false}
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Privval_PingRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PingRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tendermint_Privval_PingRequest, rhs: Tendermint_Privval_PingRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Privval_PingResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PingResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tendermint_Privval_PingResponse, rhs: Tendermint_Privval_PingResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Privval_Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Message"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pub_key_request"),
    2: .standard(proto: "pub_key_response"),
    3: .standard(proto: "sign_vote_request"),
    4: .standard(proto: "signed_vote_response"),
    5: .standard(proto: "sign_proposal_request"),
    6: .standard(proto: "signed_proposal_response"),
    7: .standard(proto: "ping_request"),
    8: .standard(proto: "ping_response"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Tendermint_Privval_PubKeyRequest?
        if let current = self.sum {
          try decoder.handleConflictingOneOf()
          if case .pubKeyRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.sum = .pubKeyRequest(v)}
      }()
      case 2: try {
        var v: Tendermint_Privval_PubKeyResponse?
        if let current = self.sum {
          try decoder.handleConflictingOneOf()
          if case .pubKeyResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.sum = .pubKeyResponse(v)}
      }()
      case 3: try {
        var v: Tendermint_Privval_SignVoteRequest?
        if let current = self.sum {
          try decoder.handleConflictingOneOf()
          if case .signVoteRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.sum = .signVoteRequest(v)}
      }()
      case 4: try {
        var v: Tendermint_Privval_SignedVoteResponse?
        if let current = self.sum {
          try decoder.handleConflictingOneOf()
          if case .signedVoteResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.sum = .signedVoteResponse(v)}
      }()
      case 5: try {
        var v: Tendermint_Privval_SignProposalRequest?
        if let current = self.sum {
          try decoder.handleConflictingOneOf()
          if case .signProposalRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.sum = .signProposalRequest(v)}
      }()
      case 6: try {
        var v: Tendermint_Privval_SignedProposalResponse?
        if let current = self.sum {
          try decoder.handleConflictingOneOf()
          if case .signedProposalResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.sum = .signedProposalResponse(v)}
      }()
      case 7: try {
        var v: Tendermint_Privval_PingRequest?
        if let current = self.sum {
          try decoder.handleConflictingOneOf()
          if case .pingRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.sum = .pingRequest(v)}
      }()
      case 8: try {
        var v: Tendermint_Privval_PingResponse?
        if let current = self.sum {
          try decoder.handleConflictingOneOf()
          if case .pingResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.sum = .pingResponse(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.sum {
    case .pubKeyRequest?: try {
      guard case .pubKeyRequest(let v)? = self.sum else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .pubKeyResponse?: try {
      guard case .pubKeyResponse(let v)? = self.sum else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .signVoteRequest?: try {
      guard case .signVoteRequest(let v)? = self.sum else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .signedVoteResponse?: try {
      guard case .signedVoteResponse(let v)? = self.sum else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .signProposalRequest?: try {
      guard case .signProposalRequest(let v)? = self.sum else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .signedProposalResponse?: try {
      guard case .signedProposalResponse(let v)? = self.sum else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .pingRequest?: try {
      guard case .pingRequest(let v)? = self.sum else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .pingResponse?: try {
      guard case .pingResponse(let v)? = self.sum else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tendermint_Privval_Message, rhs: Tendermint_Privval_Message) -> Bool {
    if lhs.sum != rhs.sum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
