// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: provenance/metadata/v0/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgMemorializeContractRequest is a request from a P8e execution environment to record results of a contract
public struct Tx_MsgMemorializeContractRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The scope of the object being modified on blockchain.
  public var scopeID: String = String()

  /// The uuid of the contract execution.
  public var groupID: String = String()

  /// Unique identifier for determining contract/group execution instance
  public var executionID: String = String()

  /// The executed contract.
  public var contract: Contract_Contract {
    get {return _contract ?? Contract_Contract()}
    set {_contract = newValue}
  }
  /// Returns true if `contract` has been explicitly set.
  public var hasContract: Bool {return self._contract != nil}
  /// Clears the value of `contract`. Subsequent reads from it will return its default value.
  public mutating func clearContract() {self._contract = nil}

  /// The contract signatures
  public var signatures: Types_SignatureSet {
    get {return _signatures ?? Types_SignatureSet()}
    set {_signatures = newValue}
  }
  /// Returns true if `signatures` has been explicitly set.
  public var hasSignatures: Bool {return self._signatures != nil}
  /// Clears the value of `signatures`. Subsequent reads from it will return its default value.
  public mutating func clearSignatures() {self._signatures = nil}

  /// ID of the scope snapshot reference for executing
  public var scopeRefID: String = String()

  /// The address of the notary (ie the broadcaster of this message).
  public var notary: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _contract: Contract_Contract? = nil
  fileprivate var _signatures: Types_SignatureSet? = nil
}

/// MemorializeContractResponse from a contract execution memorialization request
public struct Tx_MemorializeContractResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// MsgChangeOwnershipRequest records the result of a change ownership p8e contract execution
public struct Tx_MsgChangeOwnershipRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The scope of the object being modified on blockchain.
  public var scopeID: String = String()

  /// The uuid of the contract execution.
  public var groupID: String = String()

  /// Unique identifier for determining contract/group execution instance
  public var executionID: String = String()

  /// The recitals to use for the scope parties
  public var recitals: Contract_Recitals {
    get {return _recitals ?? Contract_Recitals()}
    set {_recitals = newValue}
  }
  /// Returns true if `recitals` has been explicitly set.
  public var hasRecitals: Bool {return self._recitals != nil}
  /// Clears the value of `recitals`. Subsequent reads from it will return its default value.
  public mutating func clearRecitals() {self._recitals = nil}

  /// The executed contract.
  public var contract: Contract_Contract {
    get {return _contract ?? Contract_Contract()}
    set {_contract = newValue}
  }
  /// Returns true if `contract` has been explicitly set.
  public var hasContract: Bool {return self._contract != nil}
  /// Clears the value of `contract`. Subsequent reads from it will return its default value.
  public mutating func clearContract() {self._contract = nil}

  /// The contract signatures
  public var signatures: Types_SignatureSet {
    get {return _signatures ?? Types_SignatureSet()}
    set {_signatures = newValue}
  }
  /// Returns true if `signatures` has been explicitly set.
  public var hasSignatures: Bool {return self._signatures != nil}
  /// Clears the value of `signatures`. Subsequent reads from it will return its default value.
  public mutating func clearSignatures() {self._signatures = nil}

  /// The address of the notary (ie the broadcaster of this message).
  public var notary: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _recitals: Contract_Recitals? = nil
  fileprivate var _contract: Contract_Contract? = nil
  fileprivate var _signatures: Types_SignatureSet? = nil
}

/// ChangeOwnershipResponse from a contract execution ownership change request
public struct Tx_ChangeOwnershipResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tx"

extension Tx_MsgMemorializeContractRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MsgMemorializeContractRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "scope_id"),
    2: .standard(proto: "group_id"),
    3: .standard(proto: "execution_id"),
    4: .same(proto: "contract"),
    5: .same(proto: "signatures"),
    6: .same(proto: "ScopeRefID"),
    7: .same(proto: "notary"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.scopeID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.groupID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.executionID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._contract) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._signatures) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.scopeRefID) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.notary) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.scopeID.isEmpty {
      try visitor.visitSingularStringField(value: self.scopeID, fieldNumber: 1)
    }
    if !self.groupID.isEmpty {
      try visitor.visitSingularStringField(value: self.groupID, fieldNumber: 2)
    }
    if !self.executionID.isEmpty {
      try visitor.visitSingularStringField(value: self.executionID, fieldNumber: 3)
    }
    if let v = self._contract {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._signatures {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.scopeRefID.isEmpty {
      try visitor.visitSingularStringField(value: self.scopeRefID, fieldNumber: 6)
    }
    if !self.notary.isEmpty {
      try visitor.visitSingularStringField(value: self.notary, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tx_MsgMemorializeContractRequest, rhs: Tx_MsgMemorializeContractRequest) -> Bool {
    if lhs.scopeID != rhs.scopeID {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.executionID != rhs.executionID {return false}
    if lhs._contract != rhs._contract {return false}
    if lhs._signatures != rhs._signatures {return false}
    if lhs.scopeRefID != rhs.scopeRefID {return false}
    if lhs.notary != rhs.notary {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tx_MemorializeContractResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MemorializeContractResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tx_MemorializeContractResponse, rhs: Tx_MemorializeContractResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tx_MsgChangeOwnershipRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MsgChangeOwnershipRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "scope_id"),
    2: .standard(proto: "group_id"),
    3: .standard(proto: "execution_id"),
    4: .same(proto: "recitals"),
    5: .same(proto: "contract"),
    6: .same(proto: "signatures"),
    7: .same(proto: "notary"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.scopeID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.groupID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.executionID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._recitals) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._contract) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._signatures) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.notary) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.scopeID.isEmpty {
      try visitor.visitSingularStringField(value: self.scopeID, fieldNumber: 1)
    }
    if !self.groupID.isEmpty {
      try visitor.visitSingularStringField(value: self.groupID, fieldNumber: 2)
    }
    if !self.executionID.isEmpty {
      try visitor.visitSingularStringField(value: self.executionID, fieldNumber: 3)
    }
    if let v = self._recitals {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._contract {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._signatures {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if !self.notary.isEmpty {
      try visitor.visitSingularStringField(value: self.notary, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tx_MsgChangeOwnershipRequest, rhs: Tx_MsgChangeOwnershipRequest) -> Bool {
    if lhs.scopeID != rhs.scopeID {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.executionID != rhs.executionID {return false}
    if lhs._recitals != rhs._recitals {return false}
    if lhs._contract != rhs._contract {return false}
    if lhs._signatures != rhs._signatures {return false}
    if lhs.notary != rhs.notary {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tx_ChangeOwnershipResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChangeOwnershipResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tx_ChangeOwnershipResponse, rhs: Tx_ChangeOwnershipResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
